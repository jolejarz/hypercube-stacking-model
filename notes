This file contains documentation for all functions in intf.

functions by category:

// data

void cmd_bins();

	command-line arguments: (data index) (size of each bin)
	
	Breaks a list of numbers into bins, computes the average of each bin, and then computes
	the average of all bin averages. The error on on the average of bin averages is also
	given.
	
	(size of each bin) is the number of numbers in each bin.
	
void cmd_coords2d();

	command-line arguments: (parameters data index) (r)
	
	This function works only for the corner evolution in 2d.
	It prints the x and h coordinates for which (x, r*x) is close to being a point
	on the interface.
	
void cmd_coords3d();

	command-line arguments: (parameters data index) (r) (s)
	
	This function works only for the corner evolution in 3d.
	It prints the x, y, and h coordinates for which (x, r*x, s*x) is close to being a point
	on the interface.
	
void cmd_dd();

	command-line arguments: (data index)
	
	Frees (data index) from memory.

void cmd_dents();

	command-line arguments: (parameters data index)
	
	This function makes a small dent at each inner corner on the interface.
	The initial interface is set with `set3d', and then `dents' is called.
	
void cmd_dindex();

	Deletes all entries from the parallel processing list.
	
void cmd_disp();

	command-line arguments: (data index) (first element) (last element)
	
	Prints the elements in the list between positions (first element) and (last element).

void cmd_midint();

	command-line arguments: (integrate parameters data index)
	
	Gives the middle of the interface after integrating a PDE.
	
void cmd_outin();

	command-line arguments: (parameters data index)
	
	Displays the numbers of outer and inner corners.

void cmd_sd();

	Shows which data indices are free and which are occupied.

void cmd_volint();

	command-line arguments: (integrate parameters data index)
	
	Gives the total eroded volume after integrating a PDE.
	
void cmd_volint4d();

	command-line arguments: (integrate parameters data index)
	
	
// file

void cmd_load();

	command-line arguments: (data index) (file)
	
	Loads (file) into (data index).
	
void cmd_save();

	command-line arguments: (data index) (file)
	
	Saves (data index) into (file).
	
void cmd_text();

	command-line arguments: (data index) (file)
	
	Saves the data in (data index) in text format to (file).
	
void cmd_xy();

	command-line arguments: (x data index) (y data index) (data file name)
	
	Saves the data in xy-format in a text data file.
	
// list

(values for (list) are 0 (loop list), 1 (step list), or 2 (save list))

void cmd_dl();

	command-line arguments: (list) (list index)
	
	Deletes an entry from (list).
	
void cmd_sl();

	command-line arguments: (list)
	
	Shows all entries in (list).

// loop

void cmd_lp();

	command-line arguments: (loop index) (number of runs) (progress)
	
	Runs the simulation (number of runs) times.
	
	If `progress' is set to `1', then the progress of the simulation is output to the screen.
	If `progress' is set to `0', then there are no status messages output to the screen.

void cmd_lpseed();

	command-line arguments: (loop index) (random number generator data index) (data index low) (data index high) (number of elements)
	
	Uses the values given by (data_index_high*2^32+data index_low) as random number seeds for future runs.
	
void cmd_tsc();

	command-line arguments: (loop index) (random number generator data index)
	
	Uses the processor's time stamp as the 64-bit random number seed.

// plot

void cmd_an2d();

	command-line arguments: (parameters data index) (flips data index) (steps per interval) (time delay) (save frames) (data file name) (plot file name)

	Animates the 2d interface.
	The initial interface must be save first by plot2d.
	The Matlab script generated by an2d is then run to animate the interface.
	
	If `save frames' is set to `1', then each frame is saved as a JPEG `000.jpg', `001.jpg',
	`002.jpg', etc.  The frames can then be combined into an animated GIF.
	
	If `save frames' is set to `0', then frames are not saved.

void cmd_an3d();

	command-line arguments: (parameters data index) (flips data index) (edge alpha) (steps per interval) (time delay) (save frames) (data file name) (plot file name)

	Animates the 3d interface.
	The initial interface must be saved first by plot3d.
	The Matlab script generated by an3d is then run to animate the interface.
	
	If `save frames' is set to `1', then each frame is saved as a JPEG `000.jpg', `001.jpg',
	`002.jpg', etc.  The frames can then be combined into an animated GIF.
	
	If `save frames' is set to `0', then frames are not saved.

	`edge alpha' sets the EdgeAlpha property of the patches and can vary
	continuously between 0 and 1.
	This controls whether patch edges are opaque (1) or transparent (0).

void cmd_an3drt();

	command-line arguments: (parameters data index) (flips data index) (edge alpha) (time data index) (beginning time) (ending time) (time per interval) (time delay) (save frames) (height data file name) (height plot file name) (animation data file name) (animation plot file name)

	Animates the 3d interface.
	Two Matlab scripts are generated: one script plots the initial height configuration,
	and the other script animates it.
	
	If `save frames' is set to `1', then each frame is saved as a JPEG `000.jpg', `001.jpg',
	`002.jpg', etc.  The frames can then be combined into an animated GIF.
	
	If `save frames' is set to `0', then frames are not saved.
	
	`edge alpha' sets the EdgeAlpha property of the patches and can vary
	continuously between 0 and 1.
	This controls whether patch edges are opaque (1) or transparent (0).

void cmd_an3dstep();

	command-line arguments: (parameters data index) (flips data index) (edge alpha) (beginning step) (ending step) (data file name) (plot file name)

	Animates the 3d interface.
	The interface is plotted starting at `beginning step', and then the user can manually
	flip spins.
	
	`edge alpha' sets the EdgeAlpha property of the patches and can vary
	continuously between 0 and 1.
	This controls whether patch edges are opaque (1) or transparent (0).

void cmd_diag();

	command-line arguments: (parameters data index) (flips data index) (steps) (data file name)

	Plots the 2d diagonal slice of the 3d curve after the specified number of steps have elapsed.
	z is plotted vs. sqrt(2)*(x=y).
	
void cmd_diag4d();

	command-line arguments: (parameters data index) (data file name)

	Plots the 2d diagonal slice of the 4d curve.
	z is plotted vs. x=y=q.
	
void cmd_diag4d3();

	command-line arguments: (parameters data index) (data file name)

	Plots the 2d diagonal slice of the 4d curve.
	z is plotted vs. x=y=q.
	
void cmd_diagint();

	command-line arguments: (integrate parameters data index) (data file name)

	Plots the 2d diagonal slice of the 3d curve obtained from numerically integrating a PDE.
	z is plotted vs. x=y.
	The plotted 2d slice is taken from the xz-plane.
	
void cmd_diagint4d();

	command-line arguments: (integrate parameters data index) (data file name)

	Plots the 2d diagonal slice of the 4d curve obtained from numerically integrating a PDE.
	z is plotted vs. x=y=q.
	
void cmd_plane();

	command-line arguments: (parameters data index) (flips data index) (steps) (y) (data file name)

	Plots a 2d slice of the 3d curve after the specified number of steps have elapsed.
	The plotted 2d slice is taken from the xz-plane.
	
void cmd_plane3da();

	command-line arguments: (parameters data index) (data file name) (r) (s)

	Plots a 2d slice of the 3d curve after the specified number of steps have elapsed.
	
	z is plotted vs. a.
	
	The point (x, r*x, s*x) lies on the interface.  At this point, a=0.
	
	a and b are defined as:
	
	a = ((x-x_0) + (y-y_0))/2
	b = ((x-x_0) - (y-y_0))/2
	
	The planes along the a and b directions are used to compute the mixed derivative d^2h/dx/dy.
	
void cmd_plane3db();

	command-line arguments: (parameters data index) (data file name) (r) (s)

	Plots a 2d slice of the 3d curve after the specified number of steps have elapsed.
	
	z is plotted vs. b.
	
	The point (x, r*x, s*x) lies on the interface.  At this point, b=0.
	
	a and b are defined as:
	
	a = ((x-x_0) + (y-y_0))/2
	b = ((x-x_0) - (y-y_0))/2
	
	The planes along the a and b directions are used to compute the mixed derivative d^2h/dx/dy.
	
void cmd_plane3dx();

	command-line arguments: (parameters data index) (data file name) (r) (s)

	Plots a 2d slice of the 3d curve after the specified number of steps have elapsed.
	
	z is plotted vs. x.
	
	The point (x, r*x, s*x) lies on the interface.  At this point, the horizontal coordinate
	in the plot is set to zero.
	
void cmd_plane3dy();

	command-line arguments: (parameters data index) (data file name) (r) (s)

	Plots a 2d slice of the 3d curve after the specified number of steps have elapsed.
	
	z is plotted vs. y.
	
	The point (x, r*x, s*x) lies on the interface.  At this point, the horizontal coordinate
	in the plot is set to zero.
	
void cmd_plane4d();

	command-line arguments: (parameters data index) (y) (q) (data file name)

	Plots a 2d slice of the 4d curve.
	The plotted 2d slice is taken from the xz-plane.
	
void cmd_planeint();

	command-line arguments: (integrate parameters data index) (y) (data file name)

	Plots a 2d slice of the 3d curve obtained from numerically integrating a PDE.
	The plotted 2d slice is taken from the xz-plane.
	
void cmd_planei4d();

	command-line arguments: (integrate parameters data index) (y) (q) (data file name)

	Plots a 2d slice of the 4d curve obtained from numerically integrating a PDE.
	The plotted 2d slice is taken from the xz-plane.
	
void cmd_plot2d();

	command-line arguments: (parameters data index) (flips data index) (steps) (data file name) (plot file name)

	Plots the 2d interface after the specified number of steps have elapsed.
	
void cmd_plot3d();

	command-line arguments: (parameters data index) (flips data index) (edge alpha) (steps) (data file name) (plot file name)

	Plots the 3d interface after the specified number of steps have elapsed.
	
	`edge alpha' sets the EdgeAlpha property of the patches and can vary
	continuously between 0 and 1.
	This controls whether patch edges are opaque (1) or transparent (0).
	
// run

void cmd_run();

	command-line arguments: (parameters data index)
	
	Begins evolving the interface.

void cmd_runbias();

	command-line arguments: (parameters data index)
	
	Begins evolving the interface.

void cmd_run4d();

	command-line arguments: (parameters data index)
	
	Begins evolving the 4d interface.

void cmd_run4d2();

	command-line arguments: (parameters data index)
	
	Begins evolving the 4d interface.
	
	`run4d2' uses less memory than `run4d' for evolving the corner.

void cmd_run4d3();

	command-line arguments: (parameters data index)
	
	Begins evolving the 4d interface.
	
	`run4d3' uses less memory than `run4d2' for evolving the corner.

void cmd_run5d();

	command-line arguments: (parameters data index)
	
	Begins evolving the 5d interface.

void cmd_runint1();

	command-line arguments: (integrate parameters data index)
	
	Begins evolving the interface by integrating the following PDE:
	
	 dz             1
	---- = -------------------
	 dt     1 - dx/dz - dy/dz

void cmd_runint4d1();

	command-line arguments: (integrate parameters data index)
	
	Begins evolving the interface by integrating the following PDE:
	
	 dz                 1
	---- = ---------------------------
	 dt     1 - dx/dz - dy/dz - dq/dz

void cmd_runint2();

	command-line arguments: (integrate parameters data index)
	
	Begins evolving the interface by integrating the following PDE:
	
	 dz       dz/dx       dz/dy     dz/dx + dz/dy - 1
	---- = ----------- ----------- -------------------
	 dt     dz/dx - 1   dz/dy - 1     dz/dx + dz/dy

void cmd_runint4d2();

	command-line arguments: (integrate parameters data index)
	
	Begins evolving the interface by integrating the following PDE:
	
	 dz       dz/dx       dz/dy       dz/dq     dz/dx + dz/dy - 1   dz/dy + dz/dq - 1   dz/dq + dz/dx - 1     dz/dx + dz/dy + dz/dq
	---- = ----------- ----------- ----------- ------------------- ------------------- ------------------- ---------------------------
	 dt     dz/dx - 1   dz/dy - 1   dz/dq - 1     dz/dx + dz/dy       dz/dy + dz/dq       dz/dq + dz/dx     dz/dx + dz/dy + dz/dq - 1

void cmd_runint3();

	command-line arguments: (integrate parameters data index)
	
	Begins evolving the interface by integrating the following PDE:
	
	 dz    --    dz/dx       dz/dy     dz/dx + dz/dy - 1  -- 2  --   d2z/dx2       d2z/dy2       d2z/dxdy    --
	---- = |  ----------- ----------- -------------------  |    |  ----------- + ----------- - -------------  |
	 dt    --  dz/dx - 1   dz/dy - 1     dz/dx + dz/dy    --    --  (dz/dx)^2     (dz/dy)^2     dz/dx dz/dy  --

// save

void cmd_svdiaga();

	command-line arguments: (save data index) (parameters data index) (diagonal area data index) (number of runs)

	Saves the total area under the diagonal after each run.

void cmd_svseed();

	command-line arguments: (save data index) (random number generator data index) (data index low) (data index high) (number of runs)

	Saves the random number seed used for each run (data_index_high*2^32+data index_low = seed).

void cmd_svvol();

	command-line arguments: (save data index) (parameters data index) (volume data index) (number of runs)

	Saves the total eroded volume after each run.

void cmd_svvol4d();

	command-line arguments: (save data index) (parameters data index) (volume data index) (number of runs)

	Saves the total eroded volume after each run in 4d.

// set

void cmd_cpcur();
	
	command-line arguments: (parameters data index)

	Copies the current height configuration into the initial height configuration.

void cmd_cpcur4d();
	
	command-line arguments: (parameters data index)

	Copies the current height configuration into the initial height configuration in 4d.

void cmd_rnglcg();

	command-line arguments: (random number generator data index)
	
	Creates a data structure for the linear congruential random number generator.

void cmd_rngmt();

	command-line arguments: (random number generator data index)
	
	Creates a data structure for the Mersenne twister random number generator.

void cmd_seed();

	command-line arguments: (random number generator data index) (seed low) (seed high)
	
	Sets (seed_high*2^32+seed_low) as the seed of the random number generator.
	
void cmd_set2d();

	command-line arguments: (parameters data index) (random number generator data index) (units) (dh) (dx) (maximum number of steps) (maximum time) (full bias) (probability of an outer corner flipping)
	
	Creates a data structure for the interface evolution in 2d and sets parameters of the interface.
	
	The simulation runs until either the maximum number of allowed steps have elapsed or until the maximum
	allowed time has elapsed.
	If the maximum number of steps is specified, then the maximum time must be set to zero.
	If the maximum time is specified, then the maximum number of steps must be set to zero.
	
	If `full bias' is set to `1', then only outer corners can flip.  In this case, `probability of an
	outer corner flipping' should also be set to 1.
	If `full bias' is set to '0', then outer and inner corners can flip.
	
void cmd_set3d();

	command-line arguments: (parameters data index) (random number generator data index) (units) (dh) (dx) (dy) (maximum number of steps) (maximum time) (full bias) (probability of an outer corner flipping)
	
	Creates a data structure for the interface evolution in 3d and sets parameters of the interface.
	
	The simulation runs until either the maximum number of allowed steps have elapsed or until the maximum
	allowed time has elapsed.
	If the maximum number of steps is specified, then the maximum time must be set to zero.
	If the maximum time is specified, then the maximum number of steps must be set to zero.
	
	If `full bias' is set to `1', then only outer corners can flip.  In this case, `probability of an
	outer corner flipping' should also be set to 1.
	If `full bias' is set to '0', then outer and inner corners can flip.
	
void cmd_set4d();

	command-line arguments: (parameters data index) (random number generator data index) (units) (dh) (dx) (dy) (dq) (maximum number of steps) (maximum time) (full bias) (probability of an outer corner flipping)
	
	Creates a data structure for the interface evolution in 4d and sets parameters of the interface.
	
	The simulation runs until either the maximum number of allowed steps have elapsed or until the maximum
	allowed time has elapsed.
	If the maximum number of steps is specified, then the maximum time must be set to zero.
	If the maximum time is specified, then the maximum number of steps must be set to zero.
	
	If `full bias' is set to `1', then only outer corners can flip.  In this case, `probability of an
	outer corner flipping' should also be set to 1.
	If `full bias' is set to '0', then outer and inner corners can flip.
	
void cmd_set4d2();

	command-line arguments: (parameters data index) (random number generator data index) (units) (dh) (dx) (dy) (dq) (maximum number of steps) (maximum time) (full bias) (probability of an outer corner flipping)
	
	This routine uses less memory than `set4d' if the corner is being evolved.
	
	Creates a data structure for the interface evolution in 4d and sets parameters of the interface.
	
	The simulation runs until either the maximum number of allowed steps have elapsed or until the maximum
	allowed time has elapsed.
	If the maximum number of steps is specified, then the maximum time must be set to zero.
	If the maximum time is specified, then the maximum number of steps must be set to zero.
	
	If `full bias' is set to `1', then only outer corners can flip.  In this case, `probability of an
	outer corner flipping' should also be set to 1.
	If `full bias' is set to '0', then outer and inner corners can flip.
	
void cmd_set4d3();

	command-line arguments: (parameters data index) (random number generator data index) (units) (dh) (dx) (dy) (dq) (maximum number of steps) (maximum time) (full bias) (probability of an outer corner flipping)
	
	This routine uses less memory than `set4d2' if the corner is being evolved.
	
	Creates a data structure for the interface evolution in 4d and sets parameters of the interface.
	
	The simulation runs until either the maximum number of allowed steps have elapsed or until the maximum
	allowed time has elapsed.
	If the maximum number of steps is specified, then the maximum time must be set to zero.
	If the maximum time is specified, then the maximum number of steps must be set to zero.
	
	If `full bias' is set to `1', then only outer corners can flip.  In this case, `probability of an
	outer corner flipping' should also be set to 1.
	If `full bias' is set to '0', then outer and inner corners can flip.
	
void cmd_set5d();

	command-line arguments: (parameters data index) (random number generator data index) (units) (dh) (dx) (dy) (dq) (dr) (maximum number of steps) (maximum time) (full bias) (probability of an outer corner flipping)
	
	Creates a data structure for the interface evolution in 5d and sets parameters of the interface.
	
	The simulation runs until either the maximum number of allowed steps have elapsed or until the maximum
	allowed time has elapsed.
	If the maximum number of steps is specified, then the maximum time must be set to zero.
	If the maximum time is specified, then the maximum number of steps must be set to zero.
	
	If `full bias' is set to `1', then only outer corners can flip.  In this case, `probability of an
	outer corner flipping' should also be set to 1.
	If `full bias' is set to '0', then outer and inner corners can flip.
	
void cmd_setint();

	command-line arguments: (integrate parameters data index) (length) (maximum time) (delta t) (delta x)
	
	Creates a data structure for the interface evolution by numerically integrating a PDE.
	
	The simulation runs until the maximum allowed time has elapsed.
	
void cmd_settsc();

	command-line arguments: (random number generator data index)
	
	Uses the processor's time stamp as the 64-bit random number seed.

// step

void cmd_area();

	command-line arguments: (step index) (parameters data index) (trigger data index) (area data index)
	
	Computes the area of the corner as it evolves after each trigger event.
	
void cmd_avgvel();

	command-line arguments: (step index) (parameters data index) (trigger data index) (average over all times)
	
	Computes the average vertical interface velocity between the first trigger event and the end
	of the simulation.
	
	If `average over all times' is set to `1', then the trigger is disregarded and `avgvel'
	saves the velocity over the entire evolution starting from t=0.

void cmd_corner();

	command-line arguments: (step index) (parameters data index)
	
	This function should be inserted as the first function in the step array if a corner is
	being evolved.
	
	It prevents heights from decreasing on one end of the corner, and it stops the simulation
	if the corner erodes too far.
	
void cmd_corner4d();

	command-line arguments: (step index) (parameters data index)
	
	This function should be inserted as the first function in the step array if a corner is
	being evolved in 4d.
	
	It prevents heights from decreasing on one end of the corner, and it stops the simulation
	if the corner erodes too far.
	
void cmd_corner5d();

	command-line arguments: (step index) (parameters data index)
	
	This function should be inserted as the first function in the step array if a corner is
	being evolved in 5d.
	
	It prevents heights from decreasing on one end of the corner, and it stops the simulation
	if the corner erodes too far.
	
void cmd_crnin();

	command-line arguments: (step index) (parameters data index) (trigger data index) (inner corners data index)
	
	Computes the number of inner corners after each trigger event.
	
void cmd_crnin2();

	command-line arguments: (step index) (parameters data index) (trigger data index) (inner corners data index)
	
	Computes the number of inner corners after each trigger event.
	`crnin2' loops through the entire height configuration after each interval and recounts the number of
	inner corners.  This function is only for testing purposes, as `crnin' is more efficient.
	
void cmd_crnout();

	command-line arguments: (step index) (parameters data index) (trigger data index) (outer corners data index)
	
	Computes the number of outer corners after each trigger event.
	
void cmd_crnout2();

	command-line arguments: (step index) (parameters data index) (trigger data index) (outer corners data index)
	
	Computes the number of outer corners after each trigger event.
	`crnout2' loops through the entire height configuration after each interval and recounts the number of
	outer corners.  This function is only for testing purposes, as `crnout' is more efficient.
	
void cmd_d2hdx2mid();

	command-line arguments: (step index) (parameters data index) (trigger data index) (curvature data index)
	
	Computes the curvature (d2h/dx2) at the middle of the interface (x=y=h).
	
void cmd_diagarea();

	command-line arguments: (step index) (parameters data index) (trigger data index) (diagonal area data index)
	
	Computes the area under the diagonal after each trigger event.
	
void cmd_flips();

	command-line arguments: (step index) (parameters data index) (flips data index)
	
	Saves the history of the interface motion.
	
void cmd_hmax();

	command-line arguments: (step index) (parameters data index) (trigger data index) (maximum height data index)
	
	It saves the h coordinate at which x=y=0.
	
void cmd_middle2d();

	command-line arguments: (step index) (parameters data index) (trigger data index) (middle data index)
	
	This function works only for the corner evolution in 2d.
	It saves the x coordinate for which x=y is close to being a point on the interface.
	
void cmd_middle3d();

	command-line arguments: (step index) (parameters data index) (trigger data index) (middle data index)
	
	This function works only for the corner evolution in 3d.
	It saves the x coordinate for which x=y=z is close to being a point on the interface.
	
void cmd_middle4d();

	command-line arguments: (step index) (parameters data index) (trigger data index) (middle data index)
	
	This function works only for the corner evolution in 4d.
	It saves the x coordinate for which x=y=q=z is close to being a point on the interface.
	
void cmd_middle4d3();

	command-line arguments: (step index) (parameters data index) (trigger data index) (middle data index)
	
	This function works only for the corner evolution in 4d.
	It saves the x coordinate for which x=y=q=z is close to being a point on the interface.
	
void cmd_middle5d();

	command-line arguments: (step index) (parameters data index) (trigger data index) (middle data index)
	
	This function works only for the corner evolution in 5d.
	It saves the x coordinate for which x=y=q=r=z is close to being a point on the interface.
	
void cmd_midstop();

	command-line arguments: (step index) (parameters data index) (x=y=z) (time data index)
	
	Stops the simulation when x=y=z is a point on the interface.
	The time when the simulation stopped is saved to (time data index).
	
void cmd_planetime();

	command-line arguments: (step index) (parameters data index) (trigger data index) (y/t increment)

	Plots a 2d slice of the 3d curve at the specified time.
	The plotted 2d slice is taken from the xz-plane.
	
	`planetime' finds the integer y value that is closest to y/t when divided by t.
	
void cmd_point2d();

	command-line arguments: (step index) (parameters data index) (trigger data index) (height data index) (r)
	
	This function works only for the corner evolution in 2d.
	It saves the y coordinate for which (x, r*x) is close to being a point on the interface.
	
void cmd_point3d();

	command-line arguments: (step index) (parameters data index) (trigger data index) (height data index) (r) (s)
	
	This function works only for the corner evolution in 3d.
	It saves the h coordinate for which (x, r*x, s*x) is close to being a point on the interface.
	
void cmd_stopcrn();

	command-line arguments: (step index) (parameters data index) (outer minus inner)
	
	Stops the simulation when the number of outer corners minus the number of inner corners first
	becomes less than `outer minus inner'.
	
void cmd_surv();

	command-line arguments: (step index) (parameters data index) (time data index) (maximum number of times)
	
	`surv' keeps track of when the interface returns to its starting position.
	
	Whenever the first height increases from 0 to 1, the counter is incremented.
	The total number of such events occuring between two trigger events is saved in (time data index).
	`surv' keeps recording times until all simulations have ended or until the number of times
	recorded exceeds (maximum number of times).

void cmd_time();

	command-line arguments: (step index) (parameters data index) (trigger data index) (time data index)
	
	Saves the time at each trigger event.
	
void cmd_totalvel();

	command-line arguments: (step index) (parameters data index) (trigger data index) (velocity data index)
	
	At each trigger event, it divides the total distance the interface has moved up by the total
	time elapsed.

void cmd_trigs();

	command-line arguments: (step index) (parameters data index) (trigger data index) (steps per interval) (progress)
	
	Sets up a trigger data structure that signals to other functions after every interval of
	`steps per interval' steps has elapsed.
	
	If `progress' is set to `1', then the progress of the simulation is output to the screen.
	If `progress' is set to `0', then there are no status messages output to the screen.

	All trigger functions should be inserted before other functions in the step array.
	
void cmd_trigt();

	command-line arguments: (step index) (parameters data index) (trigger data index) (time per interval) (progress)
	
	Sets up a trigger data structure that signals to other functions after every interval of
	`time per interval' time has elapsed.
	
	If `progress' is set to `1', then the progress of the simulation is output to the screen.
	If `progress' is set to `0', then there are no status messages output to the screen.
	
	All trigger functions should be inserted before other functions in the step array.

void cmd_trigtonce();

	command-line arguments: (step index) (parameters data index) (trigger data index) (time) (number of runs)
	
	Sets up a trigger data structure that signals to other functions when the time equals
	the specified value.
	
	All trigger functions should be inserted before other functions in the step array.
	
void cmd_vel();

	command-line arguments: (step index) (parameters data index) (trigger data index) (velocity data index)
	
	Computes the average vertical interface velocity after each trigger event and saves the
	velocity data.

void cmd_vel4d();

	command-line arguments: (step index) (parameters data index) (trigger data index) (velocity data index)
	
	Computes the average vertical interface velocity in 4d after each trigger event and saves the
	velocity data.

void cmd_vel5d();

	command-line arguments: (step index) (parameters data index) (trigger data index) (velocity data index)
	
	Computes the average vertical interface velocity in 5d after each trigger event and saves the
	velocity data.

void cmd_volume();

	command-line arguments: (step index) (parameters data index) (trigger data index) (volume data index)
	
	Computes the volume of the corner as it evolves after each trigger event.

void cmd_width();

	command-line arguments: (step index) (parameters data index) (trigger data index) (width data index)
	
	Computes the width of the flat interface after each trigger event.

void cmd_widthnew();

	command-line arguments: (step index) (parameters data index) (trigger data index) (width data index) (number of runs)
	
	Computes the width of the flat interface after each trigger event.

void cmd_xmeandyme();

	command-line arguments: (step index) (parameters data index) (trigger data index) (probability data index)
	
	Computes the probability that both the height at (x-1, y) and the height at
	(x, y-1) are equal to the height at (x, y).

void cmd_xmg();

	command-line arguments: (step index) (parameters data index) (trigger data index) (probability data index)
	
	Computes the probability that the height at (x-1, y) is greater than the height at (x, y).

void cmd_xmgorymg();

	command-line arguments: (step index) (parameters data index) (trigger data index) (probability data index)
	
	Computes the probability that either the height at (x-1, y) or the height at
	(x, y-1) is greater than the height at (x, y).

void cmd_ymg();

	command-line arguments: (step index) (parameters data index) (trigger data index) (probability data index)
	
	Computes the probability that the height at (x, y-1) is greater than the height at (x, y).

